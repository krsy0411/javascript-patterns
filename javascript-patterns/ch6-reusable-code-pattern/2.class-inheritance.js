// 클래스 방식(생성자 함수)의 상속 사용하는 경우 예상되는 산출물

// 목표 : Child()라는 생성자 함수로 생성된 객체들이, Parent()의 프로퍼티를 가지도록 하기
function Parent(name) {
	this.name = name || "LEE";
}

Parent.prototype.say = function () {
	return "Hi, " + this.name;
};

function Child(name) {}

// 해당 메서드를 통해 부모 생성자 함수의 프로퍼티를 가지도록 할 예정
inherit(Child, Parent);

// ----------------------------------------------------------------------------

// 방법1) 기본 패턴
// Parent 생성자 함수의 객체를 만들어, 해당 객체를 Child 생성자 함수의 프로토타입으로 할당
function inherit(C, P) {
	C.prototype = new P();
}

// 다만, 방법1은 다음과 같은 단점들이 존재
// 1. 부모 객체의 this에 추가된 객체 자신의 프로퍼티와 프로토타입 프로퍼티를 모두 물려받게 됨: 대부분의 경우, 객체의 프로퍼티는 특정 인스턴스에 한정되기에 재사용 불가 -> 굳이 필요 X
// 2. 범용 inherit 함수는 인자를 처리불가

// ----------------------------------------------------------------------------

// 방법2) 생성자 빌려쓰기
