// JS는, 다른 언어들의 다양한 작업들을 "함수"가 수행한다.
// JS의 함수는 2가지의 중요한 특징 보유
// 1. "일급 객체"
// 1-1) 런타임(프로그램 실행 중)에 동적으로 함수 생성 가능
// 1-2) 함수를 변수에 할당 가능 + 다른 변수에 참조를 복사 가능 + 확장 가능 + 삭제 가능 + 다른 함수의 인자로 전달 가능 + 다른 함수의 반환값으로 사용 가능 + 자기 자신의 프로퍼티와 메서드 보유 가능
// 2. "함수가 유효범위(스코프)를 제공" : JS는 "블록 레벨 스코프"가 아닌 "함수 레벨 스코프"를 제공

// --------------------------------------------------------------------------------------------------

// 함수 정의하는 코드 용어 2가지 : "함수 표현식" & "함수 선언문"
// 1. 함수 표현식
// 1-1) 기명 함수 표현식
const add = function add(x, y) {
	return x + y;
};
// 1-2) 익명 함수 표현식 : 무명 함수 표현식 : 함수 표현식
const add2 = function (x, y) {
	return x + y;
};
// <기명함수 표현식 & 익명함수 표현식의 차이점>
// 두 표현식 방식의 유일한 차이점이라면, 기명함수 표현식에는 함수 객체의 name property에 함수 이름이 설정된다는 것 뿐이다(익명함수표현식에는 빈 문자열)

// 2. 함수 선언문
function foo(x, y) {
	console.log(x + y);
}

// --------------------------------------------------------------------------------------------------
// <함수 선언문 & 함수 표현식의 차이점>
// name property는, 일부 환경에서는 익명함수 표현식에서도 자동으로 name 프로퍼티가 추가됨
console.log(add2.name); // 'add2
console.log(foo.name); // 'foo'
// 2. 함수 선언문은 함수 호이스팅이 발생하지만, 함수 표현식은 함수 호이스팅이 발생하지 않음
