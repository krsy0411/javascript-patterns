// 체이닝 패턴 : 객체에 연쇄적으로 메서드를 호출할 수 잇도록 하는 패턴
// 만약 메서드에 의미있는 반환 값이 존재하지 않는다면(= 반환할 값이 없다던지), 현재 작업중인 객체 인스턴스인 this를 반환

const obj = {
	value: 1,
	increment: function () {
		this.value += 1;
		return this;
	},
	add: function (v) {
		this.value += v;
		return this;
	},
	shout: function () {
		console.log(this.value); // 브라우저 환경이라면, alert 사용할듯
	},
};

// 메서드 체이닝 호출
obj.increment().add(3).shout(); // 5

// ------------------------------------------------------------

// 장점
// 1) 코드량 감소, 코드 간결함 -> 하나의 문장처럼 읽기 가능
// 2) 함수를 더 작고 특화되도록 생성 가능 -> 재사용성 증가
// 단점
// 1) 디버깅 어려움 : 특정 라인에서 에러 발생해도, 에러를 일으킨 메서드를 특정하기 어려움
// 2) 가독성 저하 : 체이닝이 길어질수록 가독성이 떨어짐

// ------------------------------------------------------------

// 그럼에도 도움이 된다 : 명백히 의미있는 반환값을 갖지 않는다면 this를 항상 반환하도록 하는 것도 좋은 선택지
// DOM API, jQuery 등에서도 이러한 패턴을 많이 사용함
